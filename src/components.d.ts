/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal'
import { IChainToken, IChartData as IChartData1, IState, TCrossType } from 'interface'
import { IChartData, ICrossToken, IToken, ITransformTokenInfo } from './interface'
export namespace Components {
  interface BaseChart {
    mini: any[]
    state: IState
  }
  interface BottomButton {
    disabled: boolean
    loading: boolean
    type: string
  }
  interface CanoeChart {
    data: IChartData[]
  }
  interface CanoeDex {
    logo: string
    name: string
    token: string
  }
  interface CanoeHeader {
    logo: string
    name: string
  }
  interface CanoeMain {
    data: IChartData1[]
    logo: string
    name: string
    state: IState
  }
  interface CanoeMini {
    mini: any[]
    state: IState
  }
  interface CanoePrice {
    state: IState
  }
  interface CanoeRank {
    state: IState
  }
  interface CanoeZoom {}
  interface CreditBox {}
  interface DealStatusBox {
    receive: ITransformTokenInfo
    send: ITransformTokenInfo
    swapData: any
    visible: boolean
  }
  interface MyTab {
    disabled: boolean
    tabList: any[]
  }
  interface SearchCross {
    crossType: TCrossType
    fromChain: string
    toChain: string
    token: IChainToken
  }
  interface SearchTokens {
    swapTokenType: string
  }
  interface SwapBox {
    /**
     * clickMenu
     */
    clickMenu: (menuName: string) => Promise<void>
  }
  interface SwapInput {
    readonly: boolean
    token: IToken | ICrossToken
    value: string | number
  }
  interface SwapSetting {
    slippage: number
    visible: boolean
  }
  interface TokenSwap {}
  interface TransferBox {}
}
export interface CanoeMiniCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLCanoeMiniElement
}
export interface CanoeZoomCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLCanoeZoomElement
}
export interface DealStatusBoxCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLDealStatusBoxElement
}
export interface MyTabCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLMyTabElement
}
export interface SearchCrossCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLSearchCrossElement
}
export interface SearchTokensCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLSearchTokensElement
}
export interface SwapInputCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLSwapInputElement
}
export interface SwapSettingCustomEvent<T> extends CustomEvent<T> {
  detail: T
  target: HTMLSwapSettingElement
}
declare global {
  interface HTMLBaseChartElement extends Components.BaseChart, HTMLStencilElement {}
  var HTMLBaseChartElement: {
    prototype: HTMLBaseChartElement
    new (): HTMLBaseChartElement
  }
  interface HTMLBottomButtonElement extends Components.BottomButton, HTMLStencilElement {}
  var HTMLBottomButtonElement: {
    prototype: HTMLBottomButtonElement
    new (): HTMLBottomButtonElement
  }
  interface HTMLCanoeChartElement extends Components.CanoeChart, HTMLStencilElement {}
  var HTMLCanoeChartElement: {
    prototype: HTMLCanoeChartElement
    new (): HTMLCanoeChartElement
  }
  interface HTMLCanoeDexElement extends Components.CanoeDex, HTMLStencilElement {}
  var HTMLCanoeDexElement: {
    prototype: HTMLCanoeDexElement
    new (): HTMLCanoeDexElement
  }
  interface HTMLCanoeHeaderElement extends Components.CanoeHeader, HTMLStencilElement {}
  var HTMLCanoeHeaderElement: {
    prototype: HTMLCanoeHeaderElement
    new (): HTMLCanoeHeaderElement
  }
  interface HTMLCanoeMainElement extends Components.CanoeMain, HTMLStencilElement {}
  var HTMLCanoeMainElement: {
    prototype: HTMLCanoeMainElement
    new (): HTMLCanoeMainElement
  }
  interface HTMLCanoeMiniElement extends Components.CanoeMini, HTMLStencilElement {}
  var HTMLCanoeMiniElement: {
    prototype: HTMLCanoeMiniElement
    new (): HTMLCanoeMiniElement
  }
  interface HTMLCanoePriceElement extends Components.CanoePrice, HTMLStencilElement {}
  var HTMLCanoePriceElement: {
    prototype: HTMLCanoePriceElement
    new (): HTMLCanoePriceElement
  }
  interface HTMLCanoeRankElement extends Components.CanoeRank, HTMLStencilElement {}
  var HTMLCanoeRankElement: {
    prototype: HTMLCanoeRankElement
    new (): HTMLCanoeRankElement
  }
  interface HTMLCanoeZoomElement extends Components.CanoeZoom, HTMLStencilElement {}
  var HTMLCanoeZoomElement: {
    prototype: HTMLCanoeZoomElement
    new (): HTMLCanoeZoomElement
  }
  interface HTMLCreditBoxElement extends Components.CreditBox, HTMLStencilElement {}
  var HTMLCreditBoxElement: {
    prototype: HTMLCreditBoxElement
    new (): HTMLCreditBoxElement
  }
  interface HTMLDealStatusBoxElement extends Components.DealStatusBox, HTMLStencilElement {}
  var HTMLDealStatusBoxElement: {
    prototype: HTMLDealStatusBoxElement
    new (): HTMLDealStatusBoxElement
  }
  interface HTMLMyTabElement extends Components.MyTab, HTMLStencilElement {}
  var HTMLMyTabElement: {
    prototype: HTMLMyTabElement
    new (): HTMLMyTabElement
  }
  interface HTMLSearchCrossElement extends Components.SearchCross, HTMLStencilElement {}
  var HTMLSearchCrossElement: {
    prototype: HTMLSearchCrossElement
    new (): HTMLSearchCrossElement
  }
  interface HTMLSearchTokensElement extends Components.SearchTokens, HTMLStencilElement {}
  var HTMLSearchTokensElement: {
    prototype: HTMLSearchTokensElement
    new (): HTMLSearchTokensElement
  }
  interface HTMLSwapBoxElement extends Components.SwapBox, HTMLStencilElement {}
  var HTMLSwapBoxElement: {
    prototype: HTMLSwapBoxElement
    new (): HTMLSwapBoxElement
  }
  interface HTMLSwapInputElement extends Components.SwapInput, HTMLStencilElement {}
  var HTMLSwapInputElement: {
    prototype: HTMLSwapInputElement
    new (): HTMLSwapInputElement
  }
  interface HTMLSwapSettingElement extends Components.SwapSetting, HTMLStencilElement {}
  var HTMLSwapSettingElement: {
    prototype: HTMLSwapSettingElement
    new (): HTMLSwapSettingElement
  }
  interface HTMLTokenSwapElement extends Components.TokenSwap, HTMLStencilElement {}
  var HTMLTokenSwapElement: {
    prototype: HTMLTokenSwapElement
    new (): HTMLTokenSwapElement
  }
  interface HTMLTransferBoxElement extends Components.TransferBox, HTMLStencilElement {}
  var HTMLTransferBoxElement: {
    prototype: HTMLTransferBoxElement
    new (): HTMLTransferBoxElement
  }
  interface HTMLElementTagNameMap {
    'base-chart': HTMLBaseChartElement
    'bottom-button': HTMLBottomButtonElement
    'canoe-chart': HTMLCanoeChartElement
    'canoe-dex': HTMLCanoeDexElement
    'canoe-header': HTMLCanoeHeaderElement
    'canoe-main': HTMLCanoeMainElement
    'canoe-mini': HTMLCanoeMiniElement
    'canoe-price': HTMLCanoePriceElement
    'canoe-rank': HTMLCanoeRankElement
    'canoe-zoom': HTMLCanoeZoomElement
    'credit-box': HTMLCreditBoxElement
    'deal-status-box': HTMLDealStatusBoxElement
    'my-tab': HTMLMyTabElement
    'search-cross': HTMLSearchCrossElement
    'search-tokens': HTMLSearchTokensElement
    'swap-box': HTMLSwapBoxElement
    'swap-input': HTMLSwapInputElement
    'swap-setting': HTMLSwapSettingElement
    'token-swap': HTMLTokenSwapElement
    'transfer-box': HTMLTransferBoxElement
  }
}
declare namespace LocalJSX {
  interface BaseChart {
    mini?: any[]
    state?: IState
  }
  interface BottomButton {
    disabled?: boolean
    loading?: boolean
    type?: string
  }
  interface CanoeChart {
    data?: IChartData[]
  }
  interface CanoeDex {
    logo?: string
    name?: string
    token?: string
  }
  interface CanoeHeader {
    logo?: string
    name?: string
  }
  interface CanoeMain {
    data?: IChartData1[]
    logo?: string
    name?: string
    state?: IState
  }
  interface CanoeMini {
    mini?: any[]
    onOpenSwap?: (event: CanoeMiniCustomEvent<any>) => void
    state?: IState
  }
  interface CanoePrice {
    state?: IState
  }
  interface CanoeRank {
    state?: IState
  }
  interface CanoeZoom {
    onClickClose?: (event: CanoeZoomCustomEvent<any>) => void
  }
  interface CreditBox {}
  interface DealStatusBox {
    onClose?: (event: DealStatusBoxCustomEvent<any>) => void
    receive?: ITransformTokenInfo
    send?: ITransformTokenInfo
    swapData?: any
    visible?: boolean
  }
  interface MyTab {
    disabled?: boolean
    onClickMenu?: (event: MyTabCustomEvent<any>) => void
    onTabChange?: (event: MyTabCustomEvent<any>) => void
    tabList?: any[]
  }
  interface SearchCross {
    crossType?: TCrossType
    fromChain?: string
    /**
     * Emitted when an item from suggestions was selected
     */
    onSelected?: (event: SearchCrossCustomEvent<any>) => void
    toChain?: string
    token?: IChainToken
  }
  interface SearchTokens {
    /**
     * Emitted when an item from suggestions was selected
     */
    onSelected?: (event: SearchTokensCustomEvent<any>) => void
    swapTokenType?: string
  }
  interface SwapBox {}
  interface SwapInput {
    onOpenSearch?: (event: SwapInputCustomEvent<any>) => void
    onUpdateValue?: (event: SwapInputCustomEvent<any>) => void
    readonly?: boolean
    token?: IToken | ICrossToken
    value?: string | number
  }
  interface SwapSetting {
    onChangeSlippage?: (event: SwapSettingCustomEvent<any>) => void
    onClose?: (event: SwapSettingCustomEvent<any>) => void
    slippage?: number
    visible?: boolean
  }
  interface TokenSwap {}
  interface TransferBox {}
  interface IntrinsicElements {
    'base-chart': BaseChart
    'bottom-button': BottomButton
    'canoe-chart': CanoeChart
    'canoe-dex': CanoeDex
    'canoe-header': CanoeHeader
    'canoe-main': CanoeMain
    'canoe-mini': CanoeMini
    'canoe-price': CanoePrice
    'canoe-rank': CanoeRank
    'canoe-zoom': CanoeZoom
    'credit-box': CreditBox
    'deal-status-box': DealStatusBox
    'my-tab': MyTab
    'search-cross': SearchCross
    'search-tokens': SearchTokens
    'swap-box': SwapBox
    'swap-input': SwapInput
    'swap-setting': SwapSetting
    'token-swap': TokenSwap
    'transfer-box': TransferBox
  }
}
export { LocalJSX as JSX }
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'base-chart': LocalJSX.BaseChart & JSXBase.HTMLAttributes<HTMLBaseChartElement>
      'bottom-button': LocalJSX.BottomButton & JSXBase.HTMLAttributes<HTMLBottomButtonElement>
      'canoe-chart': LocalJSX.CanoeChart & JSXBase.HTMLAttributes<HTMLCanoeChartElement>
      'canoe-dex': LocalJSX.CanoeDex & JSXBase.HTMLAttributes<HTMLCanoeDexElement>
      'canoe-header': LocalJSX.CanoeHeader & JSXBase.HTMLAttributes<HTMLCanoeHeaderElement>
      'canoe-main': LocalJSX.CanoeMain & JSXBase.HTMLAttributes<HTMLCanoeMainElement>
      'canoe-mini': LocalJSX.CanoeMini & JSXBase.HTMLAttributes<HTMLCanoeMiniElement>
      'canoe-price': LocalJSX.CanoePrice & JSXBase.HTMLAttributes<HTMLCanoePriceElement>
      'canoe-rank': LocalJSX.CanoeRank & JSXBase.HTMLAttributes<HTMLCanoeRankElement>
      'canoe-zoom': LocalJSX.CanoeZoom & JSXBase.HTMLAttributes<HTMLCanoeZoomElement>
      'credit-box': LocalJSX.CreditBox & JSXBase.HTMLAttributes<HTMLCreditBoxElement>
      'deal-status-box': LocalJSX.DealStatusBox & JSXBase.HTMLAttributes<HTMLDealStatusBoxElement>
      'my-tab': LocalJSX.MyTab & JSXBase.HTMLAttributes<HTMLMyTabElement>
      'search-cross': LocalJSX.SearchCross & JSXBase.HTMLAttributes<HTMLSearchCrossElement>
      'search-tokens': LocalJSX.SearchTokens & JSXBase.HTMLAttributes<HTMLSearchTokensElement>
      'swap-box': LocalJSX.SwapBox & JSXBase.HTMLAttributes<HTMLSwapBoxElement>
      'swap-input': LocalJSX.SwapInput & JSXBase.HTMLAttributes<HTMLSwapInputElement>
      'swap-setting': LocalJSX.SwapSetting & JSXBase.HTMLAttributes<HTMLSwapSettingElement>
      'token-swap': LocalJSX.TokenSwap & JSXBase.HTMLAttributes<HTMLTokenSwapElement>
      'transfer-box': LocalJSX.TransferBox & JSXBase.HTMLAttributes<HTMLTransferBoxElement>
    }
  }
}
